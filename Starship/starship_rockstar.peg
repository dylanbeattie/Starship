@namespace Starship
@classname Parser
@using Starship.Rockstar
@using System.Linq

program<RSProgram>  = lines:line+ { new RSProgram(lines.Where(l => l != null)) }
line<RSStatement>   = _ s:statement _ EOL+ { s }
                    / _ s:statement _ EOF { s }
                    / blank_line { null }

blank_line = _ EOL

statement<RSStatement> = output

say = 'say'i / 'shout'i / 'scream'i / 'whisper'i

output<RSOutput> = say _ e:expression { new RSOutput(e) }

expression<RSExpression> = literal

literal<RSExpression> = constant / number / string

constant<RSExpression> = empty_string / null / true / false / mysterious

empty_string<RSConstant> = ('silent'i / 'silence'i) !letter { new RSConstant(String.Empty) }

true<RSConstant> 	= ('true'i / 'ok'i / 'right'i / 'yes'i) !letter { new RSConstant(true) }

false<RSConstant> 	= ('false'i / 'lies'i / 'wrong'i / 'no'i) !letter { new RSConstant(false) }

null<RSConstant> 	= ('null'i / 'nothing'i / 'nowhere'i / 'nobody'i / 'empty'i / 'gone'i) { new RSConstant(null) }

mysterious<RSMysterious> = 'mysterious'  { new RSMysterious() }

string<RSString> = '"' s:[^"]+ '"' { new RSString(String.Concat(s)) }

digits = d:[0-9]+

number<RSNumber> = d:(digits ('.' digits)?) { new RSNumber(decimal.Parse(String.Concat(d))) }

whitespace  = [ \t]
comment     = '(' [^)]* ')'
_           = (whitespace / comment)*

EOL = [\r\n]+
EOF = !.


uppercase_letter = [A-ZÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĸĹĻĽĿŁŃŅŇŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸŹŻŽ]
lowercase_letter = [a-zàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĳĵķĸĺļľŀłńņňŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷÿźżžŉß]

letter = uppercase_letter / lowercase_letter
